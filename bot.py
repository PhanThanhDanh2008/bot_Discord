import discord
from discord.ext import commands, tasks
import sqlite3
import asyncio
import json
import matplotlib.pyplot as plt
import io
import base64
from datetime import datetime, timedelta
from typing import Optional, Dict, List
import logging

# ==== C·∫§U H√åNH BOT ====
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix=['/', '!'], intents=intents, help_command=None)

# ==== LOGGING ====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== C·∫§U H√åNH ====
CONFIG = {
    'CURRENCY': 'VND',
    'BACKUP_INTERVAL': 3600,  # 1 gi·ªù
    'MAX_TRANSACTIONS_DISPLAY': 15,
    'CHART_WIDTH': 12,
    'CHART_HEIGHT': 8
}

# ==== T·∫†O DATABASE N√ÇNG C·∫§P ====
def init_database():
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # B·∫£ng users n√¢ng c·∫•p
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0,
            goal INTEGER DEFAULT 0,
            monthly_budget INTEGER DEFAULT 0,
            savings_goal INTEGER DEFAULT 0,
            currency TEXT DEFAULT 'VND',
            timezone TEXT DEFAULT 'Asia/Ho_Chi_Minh',
            notifications BOOLEAN DEFAULT 1,
            created_date TEXT,
            last_active TEXT
        )
    ''')
    
    # B·∫£ng transactions n√¢ng c·∫•p
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER,
            type TEXT,
            category TEXT,
            description TEXT,
            date TEXT,
            recurring BOOLEAN DEFAULT 0,
            recurring_interval INTEGER DEFAULT 0,
            tags TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # B·∫£ng categories
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            type TEXT,
            color TEXT,
            icon TEXT,
            budget_limit INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # B·∫£ng budgets
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS budgets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            category TEXT,
            amount INTEGER,
            period TEXT,
            start_date TEXT,
            end_date TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # B·∫£ng savings_goals
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS savings_goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            target_amount INTEGER,
            current_amount INTEGER DEFAULT 0,
            deadline TEXT,
            description TEXT,
            created_date TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # B·∫£ng notifications
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            type TEXT,
            read BOOLEAN DEFAULT 0,
            created_date TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # Th√™m categories m·∫∑c ƒë·ªãnh
    cursor.execute('SELECT COUNT(*) FROM categories')
    if cursor.fetchone()[0] == 0:
        default_categories = [
            ('üçî', 'ƒÇn u·ªëng', 'expense', '#FF6B6B'),
            ('üöó', 'Giao th√¥ng', 'expense', '#4ECDC4'),
            ('üè†', 'Nh√† c·ª≠a', 'expense', '#45B7D1'),
            ('üíä', 'Y t·∫ø', 'expense', '#96CEB4'),
            ('üéÆ', 'Gi·∫£i tr√≠', 'expense', '#FFEAA7'),
            ('üëï', 'Qu·∫ßn √°o', 'expense', '#DDA0DD'),
            ('üìö', 'Gi√°o d·ª•c', 'expense', '#98D8C8'),
            ('üí∞', 'L∆∞∆°ng', 'income', '#00B894'),
            ('üíº', 'Kinh doanh', 'income', '#FDCB6E'),
            ('üéÅ', 'Qu√† t·∫∑ng', 'income', '#E17055')
        ]
        for icon, name, cat_type, color in default_categories:
            cursor.execute('INSERT INTO categories (user_id, name, type, color, icon) VALUES (0, ?, ?, ?, ?)',
                         (name, cat_type, color, icon))
    
    conn.commit()
    conn.close()

# ==== H√ÄM PH·ª§ N√ÇNG C√ÇP ====
def format_money(amount, currency='VND'):
    if currency == 'VND':
        return f"{amount:,} ‚Ç´".replace(",", ".")
    return f"{amount:,} {currency}"

def get_or_create_user(user_id, username=None):
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    if not user:
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''INSERT INTO users 
                         (user_id, username, balance, goal, created_date, last_active) 
                         VALUES (?, ?, 0, 0, ?, ?)''',
                       (user_id, username, now, now))
        conn.commit()
    else:
        # C·∫≠p nh·∫≠t last_active
        cursor.execute('UPDATE users SET last_active = ? WHERE user_id = ?',
                       (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id))
        conn.commit()
    conn.close()

def get_categories(user_id, cat_type=None):
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    if cat_type:
        cursor.execute('SELECT * FROM categories WHERE (user_id = ? OR user_id = 0) AND type = ?', (user_id, cat_type))
    else:
        cursor.execute('SELECT * FROM categories WHERE user_id = ? OR user_id = 0', (user_id,))
    categories = cursor.fetchall()
    conn.close()
    return categories

async def create_chart(data, chart_type='bar', title='Bi·ªÉu ƒë·ªì'):
    """T·∫°o bi·ªÉu ƒë·ªì th·ªëng k√™"""
    try:
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(CONFIG['CHART_WIDTH'], CONFIG['CHART_HEIGHT']))
        
        if chart_type == 'pie' and data:
            labels = [item[0] for item in data]
            sizes = [item[1] for item in data]
            colors = plt.cm.Set3(range(len(labels)))
            
            wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors)
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        
        elif chart_type == 'bar' and data:
            labels = [item[0] for item in data]
            values = [item[1] for item in data]
            colors = plt.cm.viridis(range(len(labels)))
            
            bars = ax.bar(labels, values, color=colors)
            ax.set_ylabel('S·ªë ti·ªÅn (‚Ç´)')
            plt.xticks(rotation=45, ha='right')
            
            # Th√™m gi√° tr·ªã tr√™n c·ªôt
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height,
                       f'{value:,.0f}‚Ç´', ha='center', va='bottom')
        
        ax.set_title(title, fontsize=16, fontweight='bold', color='white')
        plt.tight_layout()
        
        # L∆∞u v√†o buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100, bbox_inches='tight', facecolor='#2C2F33')
        buffer.seek(0)
        plt.close()
        
        return discord.File(buffer, filename='chart.png')
    except Exception as e:
        logger.error(f"Error creating chart: {e}")
        return None

def create_progress_bar(current, target, length=20):
    """T·∫°o thanh ti·∫øn tr√¨nh"""
    if target <= 0:
        return "‚ñ±" * length + " 0%"
    
    progress = min(current / target, 1.0)
    filled = int(progress * length)
    bar = "‚ñ∞" * filled + "‚ñ±" * (length - filled)
    percentage = progress * 100
    return f"{bar} {percentage:.1f}%"

# ==== S·ª∞ KI·ªÜN BOT ====
@bot.event
async def on_ready():
    print(f'üöÄ {bot.user} ƒë√£ online v·ªõi {len(bot.guilds)} servers!')
    init_database()
    daily_summary.start()
    backup_database.start()

@bot.event 
async def on_guild_join(guild):
    logger.info(f"Bot joined guild: {guild.name} ({guild.id})")

# ==== TASKS ƒê·ªäNH K·ª≤ ====
@tasks.loop(hours=24)
async def daily_summary():
    """G·ª≠i t√≥m t·∫Øt h√†ng ng√†y"""
    await bot.wait_until_ready()
    # Implement daily summary logic here

@tasks.loop(seconds=CONFIG['BACKUP_INTERVAL'])
async def backup_database():
    """Backup database ƒë·ªãnh k·ª≥"""
    await bot.wait_until_ready()
    # Implement backup logic here

# ==== L·ªÜNH HELP N√ÇNG C√ÇP ====
@bot.command(name='help')
async def help_command(ctx):
    embeds = []
    
    # Trang 1: L·ªánh c∆° b·∫£n
    embed1 = discord.Embed(
        title="ü§ñ Finance Bot - H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng", 
        description="Bot qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n to√†n di·ªán",
        color=0x00ff41
    )
    embed1.add_field(
        name="üí∞ **L·ªánh C∆° B·∫£n**",
        value="`/balance` - Xem s·ªë d∆∞ v√† t·ªïng quan\n"
              "`/add [s·ªë ti·ªÅn] [danh m·ª•c] [m√¥ t·∫£]` - Th√™m thu nh·∫≠p\n"
              "`/spend [s·ªë ti·ªÅn] [danh m·ª•c] [m√¥ t·∫£]` - Ghi nh·∫≠n chi ti√™u\n"
              "`/transfer [s·ªë ti·ªÅn] [@user]` - Chuy·ªÉn ti·ªÅn",
        inline=False
    )
    embed1.add_field(
        name="üéØ **M·ª•c Ti√™u & Ng√¢n S√°ch**",
        value="`/goal [s·ªë ti·ªÅn]` - ƒê·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám\n"
              "`/budget [danh m·ª•c] [s·ªë ti·ªÅn]` - ƒê·∫∑t ng√¢n s√°ch\n"
              "`/savings [t√™n] [s·ªë ti·ªÅn] [deadline]` - T·∫°o m·ª•c ti√™u ti·∫øt ki·ªám",
        inline=False
    )
    embed1.set_footer(text="Trang 1/3 ‚Ä¢ D√πng /help2 ƒë·ªÉ xem ti·∫øp")
    embeds.append(embed1)
    
    # Trang 2: Th·ªëng k√™ v√† b√°o c√°o
    embed2 = discord.Embed(
        title="üìä Th·ªëng K√™ & B√°o C√°o",
        color=0x3498db
    )
    embed2.add_field(
        name="üìà **Ph√¢n T√≠ch**",
        value="`/stats` - Th·ªëng k√™ chi ti·∫øt\n"
              "`/chart [type]` - Bi·ªÉu ƒë·ªì (pie/bar)\n"
              "`/report [period]` - B√°o c√°o (week/month/year)\n"
              "`/compare [period1] [period2]` - So s√°nh",
        inline=False
    )
    embed2.add_field(
        name="üìã **L·ªãch S·ª≠**",
        value="`/history [days]` - L·ªãch s·ª≠ giao d·ªãch\n"
              "`/search [keyword]` - T√¨m ki·∫øm giao d·ªãch\n"
              "`/category` - Qu·∫£n l√Ω danh m·ª•c",
        inline=False
    )
    embed2.set_footer(text="Trang 2/3 ‚Ä¢ D√πng /help3 ƒë·ªÉ xem ti·∫øp")
    embeds.append(embed2)
    
    # Trang 3: N√¢ng cao
    embed3 = discord.Embed(
        title="‚öôÔ∏è T√≠nh NƒÉng N√¢ng Cao",
        color=0x9b59b6
    )
    embed3.add_field(
        name="üîî **Th√¥ng B√°o & C√†i ƒê·∫∑t**",
        value="`/notify [on/off]` - B·∫≠t/t·∫Øt th√¥ng b√°o\n"
              "`/settings` - C√†i ƒë·∫∑t c√° nh√¢n\n"
              "`/export` - Xu·∫•t d·ªØ li·ªáu\n"
              "`/import` - Nh·∫≠p d·ªØ li·ªáu",
        inline=False
    )
    embed3.add_field(
        name="üéÆ **Gamification**",
        value="`/achievements` - Th√†nh t√≠ch\n"
              "`/leaderboard` - B·∫£ng x·∫øp h·∫°ng\n"
              "`/challenge` - Th·ª≠ th√°ch ti·∫øt ki·ªám",
        inline=False
    )
    embed3.add_field(
        name="üìù **V√≠ D·ª•**",
        value="`/add 5000000 L∆∞∆°ng L∆∞∆°ng th√°ng 12`\n"
              "`/spend 150000 ƒÇn u·ªëng Tr√† s·ªØa v·ªõi b·∫°n`\n"
              "`/goal 20000000`\n"
              "`/budget ƒÇn u·ªëng 2000000`",
        inline=False
    )
    embed3.set_footer(text="Trang 3/3 ‚Ä¢ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng!")
    embeds.append(embed3)
    
    await ctx.send(embed=embeds[0])

@bot.command(name='help2')
async def help2_command(ctx):
    embed = discord.Embed(title="üìä Th·ªëng K√™ & B√°o C√°o", color=0x3498db)
    embed.add_field(
        name="üìà **Ph√¢n T√≠ch**",
        value="`/stats` - Th·ªëng k√™ chi ti·∫øt\n"
              "`/chart [type]` - Bi·ªÉu ƒë·ªì (pie/bar)\n"
              "`/report [period]` - B√°o c√°o (week/month/year)",
        inline=False
    )
    embed.add_field(
        name="üìã **L·ªãch S·ª≠**",
        value="`/history [days]` - L·ªãch s·ª≠ giao d·ªãch\n"
              "`/search [keyword]` - T√¨m ki·∫øm giao d·ªãch\n"
              "`/category` - Qu·∫£n l√Ω danh m·ª•c",
        inline=False
    )
    await ctx.send(embed=embed)

# ==== L·ªÜNH BALANCE N√ÇNG C√ÇP ====
@bot.command(name='balance', aliases=['bal', 'b'])
async def balance(ctx):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # L·∫•y th√¥ng tin user
    cursor.execute('SELECT balance, goal, monthly_budget FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    
    # Th·ªëng k√™ th√°ng hi·ªán t·∫°i
    current_month = datetime.now().strftime('%Y-%m')
    cursor.execute('''
        SELECT type, SUM(amount) 
        FROM transactions 
        WHERE user_id = ? AND date LIKE ? 
        GROUP BY type
    ''', (user_id, f'{current_month}%'))
    month_stats = dict(cursor.fetchall())
    
    # L·∫•y savings goals
    cursor.execute('SELECT name, target_amount, current_amount FROM savings_goals WHERE user_id = ?', (user_id,))
    savings_goals = cursor.fetchall()
    
    conn.close()

    balance_amount, goal_amount, monthly_budget = user_data
    monthly_income = month_stats.get('income', 0)
    monthly_expense = month_stats.get('expense', 0)
    monthly_net = monthly_income - monthly_expense
    
    # T·∫°o embed ch√≠nh
    embed = discord.Embed(
        title=f"üíé T·ªïng Quan T√†i Ch√≠nh - {ctx.author.display_name}",
        color=0x00ff41 if balance_amount >= 0 else 0xff4757
    )
    
    # S·ªë d∆∞ ch√≠nh
    embed.add_field(
        name="üí∞ **S·ªë D∆∞ Hi·ªán T·∫°i**",
        value=f"**{format_money(balance_amount)}**",
        inline=True
    )
    
    # M·ª•c ti√™u
    if goal_amount > 0:
        progress = min((balance_amount / goal_amount) * 100, 100)
        progress_bar = create_progress_bar(balance_amount, goal_amount)
        embed.add_field(
            name="üéØ **M·ª•c Ti√™u**",
            value=f"{format_money(goal_amount)}\n{progress_bar}",
            inline=True
        )
    
    # Th·ªëng k√™ th√°ng
    embed.add_field(
        name="üìä **Th√°ng N√†y**",
        value=f"Thu: +{format_money(monthly_income)}\n"
              f"Chi: -{format_money(monthly_expense)}\n"
              f"R√≤ng: {format_money(monthly_net)}",
        inline=True
    )
    
    # Ng√¢n s√°ch
    if monthly_budget > 0:
        budget_used = (monthly_expense / monthly_budget) * 100
        budget_bar = create_progress_bar(monthly_expense, monthly_budget)
        embed.add_field(
            name="üí≥ **Ng√¢n S√°ch Th√°ng**",
            value=f"{format_money(monthly_budget)}\n{budget_bar}\n"
                  f"ƒê√£ d√πng: {budget_used:.1f}%",
            inline=False
        )
    
    # M·ª•c ti√™u ti·∫øt ki·ªám
    if savings_goals:
        savings_text = ""
        for name, target, current in savings_goals[:3]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 3
            progress = (current / target) * 100 if target > 0 else 0
            savings_text += f"**{name}**: {format_money(current)}/{format_money(target)} ({progress:.1f}%)\n"
        embed.add_field(
            name="üè¶ **M·ª•c Ti√™u Ti·∫øt Ki·ªám**",
            value=savings_text,
            inline=False
        )
    
    # Footer v·ªõi th·ªùi gian
    embed.set_footer(
        text=f"C·∫≠p nh·∫≠t: {datetime.now().strftime('%d/%m/%Y %H:%M')}",
        icon_url=ctx.author.avatar.url if ctx.author.avatar else None
    )
    
    await ctx.send(embed=embed)

# ==== L·ªÜNH ADD N√ÇNG C√ÇP ====
@bot.command(name='add', aliases=['income', '+'])
async def add(ctx, amount: int, category: str = "Kh√°c", *, description: str = "Kh√¥ng c√≥ m√¥ t·∫£"):
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return

    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    # Ki·ªÉm tra category c√≥ t·ªìn t·∫°i kh√¥ng
    categories = get_categories(user_id, 'income')
    category_names = [cat[2] for cat in categories]  # cat[2] l√† t√™n category
    
    if category not in category_names and category != "Kh√°c":
        category = "Kh√°c"  # Fallback to default
    
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # C·∫≠p nh·∫≠t s·ªë d∆∞
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    
    # Th√™m transaction
    cursor.execute('''
        INSERT INTO transactions (user_id, amount, type, category, description, date) 
        VALUES (?, ?, "income", ?, ?, ?)
    ''', (user_id, amount, category, description, now))
    
    # L·∫•y s·ªë d∆∞ m·ªõi
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    new_balance = cursor.fetchone()[0]
    
    conn.commit()
    conn.close()

    # T·∫°o embed ƒë·∫πp
    embed = discord.Embed(
        title="‚úÖ Thu Nh·∫≠p ƒê√£ ƒê∆∞·ª£c Ghi Nh·∫≠n",
        description="Giao d·ªãch ƒë∆∞·ª£c th√™m th√†nh c√¥ng!",
        color=0x00ff41
    )
    
    embed.add_field(name="üíµ **S·ªë Ti·ªÅn**", value=f"+{format_money(amount)}", inline=True)
    embed.add_field(name="üìÇ **Danh M·ª•c**", value=category, inline=True)
    embed.add_field(name="üìù **M√¥ T·∫£**", value=description, inline=True)
    embed.add_field(name="üí∞ **S·ªë D∆∞ M·ªõi**", value=format_money(new_balance), inline=False)
    
    embed.set_footer(text=f"ID: {ctx.author.id} ‚Ä¢ {now}")
    embed.set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/1828/1828884.png")
    
    await ctx.send(embed=embed)

# ==== L·ªÜNH SPEND N√ÇNG C√ÇP ====
@bot.command(name='spend', aliases=['expense', 'pay', '-'])
async def spend(ctx, amount: int, category: str = "Kh√°c", *, description: str = "Kh√¥ng c√≥ m√¥ t·∫£"):
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return

    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)

    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # Ki·ªÉm tra s·ªë d∆∞
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    current_balance = cursor.fetchone()[0]

    if current_balance < amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒê·ªß S·ªë D∆∞",
            description=f"B·∫°n c·∫ßn th√™m {format_money(amount - current_balance)}",
            color=0xff4757
        )
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=format_money(current_balance), inline=True)
        embed.add_field(name="S·ªë ti·ªÅn c·∫ßn", value=format_money(amount), inline=True)
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra category v√† budget warning
    categories = get_categories(user_id, 'expense')
    category_names = [cat[2] for cat in categories]
    
    if category not in category_names and category != "Kh√°c":
        category = "Kh√°c"
    
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # C·∫≠p nh·∫≠t s·ªë d∆∞
    cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
    
    # Th√™m transaction
    cursor.execute('''
        INSERT INTO transactions (user_id, amount, type, category, description, date) 
        VALUES (?, ?, "expense", ?, ?, ?)
    ''', (user_id, amount, category, description, now))
    
    # L·∫•y s·ªë d∆∞ m·ªõi
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    new_balance = cursor.fetchone()[0]
    
    # Ki·ªÉm tra ng√¢n s√°ch category
    current_month = datetime.now().strftime('%Y-%m')
    cursor.execute('''
        SELECT SUM(amount) FROM transactions 
        WHERE user_id = ? AND category = ? AND type = "expense" AND date LIKE ?
    ''', (user_id, category, f'{current_month}%'))
    category_spent = cursor.fetchone()[0] or 0
    
    conn.commit()
    conn.close()

    # T·∫°o embed
    embed = discord.Embed(
        title="üí∏ Chi Ti√™u ƒê√£ ƒê∆∞·ª£c Ghi Nh·∫≠n",
        description="Giao d·ªãch ƒë∆∞·ª£c ghi nh·∫≠n th√†nh c√¥ng!",
        color=0xff6b6b
    )
    
    embed.add_field(name="üí∞ **S·ªë Ti·ªÅn**", value=f"-{format_money(amount)}", inline=True)
    embed.add_field(name="üìÇ **Danh M·ª•c**", value=category, inline=True)
    embed.add_field(name="üìù **M√¥ T·∫£**", value=description, inline=True)
    embed.add_field(name="üí≥ **S·ªë D∆∞ C√≤n L·∫°i**", value=format_money(new_balance), inline=False)
    
    # Warning n·∫øu chi ti√™u nhi·ªÅu
    if category_spent > 1000000:  # 1M VND
        embed.add_field(
            name="‚ö†Ô∏è **C·∫£nh B√°o**",
            value=f"B·∫°n ƒë√£ chi {format_money(category_spent)} cho **{category}** trong th√°ng n√†y!",
            inline=False
        )
    
    embed.set_footer(text=f"ID: {ctx.author.id} ‚Ä¢ {now}")
    embed.set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/1611/1611179.png")
    
    await ctx.send(embed=embed)

# ==== L·ªÜNH CHART ====
@bot.command(name='chart', aliases=['graph'])
async def chart(ctx, chart_type: str = 'pie', period: str = 'month'):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # L·∫•y d·ªØ li·ªáu theo period
    if period == 'month':
        current_period = datetime.now().strftime('%Y-%m')
        period_filter = f'{current_period}%'
        title = f"Chi Ti√™u Theo Danh M·ª•c - Th√°ng {current_period}"
    elif period == 'week':
        week_start = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        period_filter = None
        title = "Chi Ti√™u Theo Danh M·ª•c - 7 Ng√†y Qua"
    else:
        current_year = datetime.now().year
        period_filter = f'{current_year}%'
        title = f"Chi Ti√™u Theo Danh M·ª•c - NƒÉm {current_year}"
    
    if period == 'week':
        cursor.execute('''
            SELECT category, SUM(amount) 
            FROM transactions 
            WHERE user_id = ? AND type = "expense" AND date >= ?
            GROUP BY category 
            ORDER BY SUM(amount) DESC
        ''', (user_id, week_start))
    else:
        cursor.execute('''
            SELECT category, SUM(amount) 
            FROM transactions 
            WHERE user_id = ? AND type = "expense" AND date LIKE ?
            GROUP BY category 
            ORDER BY SUM(amount) DESC
        ''', (user_id, period_filter))
    
    data = cursor.fetchall()
    conn.close()
    
    if not data:
        await ctx.send("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì.")
        return
    
    # T·∫°o bi·ªÉu ƒë·ªì
    chart_file = await create_chart(data, chart_type, title)
    
    if chart_file:
        embed = discord.Embed(
            title=f"üìä {title}",
            color=0x3498db
        )
        embed.set_image(url="attachment://chart.png")
        embed.set_footer(text=f"T·∫°o b·ªüi {ctx.author.display_name}")
        await ctx.send(embed=embed, file=chart_file)
    else:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì. Vui l√≤ng th·ª≠ l·∫°i sau.")

# ==== L·ªÜNH STATS N√ÇNG C√ÇP ====
@bot.command(name='stats', aliases=['statistics'])
async def stats(ctx, period: str = 'month'):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian
    if period == 'week':
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        title = "üìä Th·ªëng K√™ 7 Ng√†y Qua"
        date_filter = "date >= ?"
        params = (user_id, start_date)
    elif period == 'year':
        current_year = datetime.now().year
        title = f"üìä Th·ªëng K√™ NƒÉm {current_year}"
        date_filter = "date LIKE ?"
        params = (user_id, f'{current_year}%')
    else:  # month
        current_month = datetime.now().strftime('%Y-%m')
        title = f"üìä Th·ªëng K√™ Th√°ng {current_month}"
        date_filter = "date LIKE ?"
        params = (user_id, f'{current_month}%')
    
    # L·∫•y t·ªïng thu chi
    cursor.execute(f'''
        SELECT type, SUM(amount), COUNT(*) 
        FROM transactions 
        WHERE user_id = ? AND {date_filter}
        GROUP BY type
    ''', params)
    summary = cursor.fetchall()
    
    # L·∫•y top categories
    cursor.execute(f'''
        SELECT category, SUM(amount), COUNT(*) 
        FROM transactions 
        WHERE user_id = ? AND type = "expense" AND {date_filter}
        GROUP BY category 
        ORDER BY SUM(amount) DESC 
        LIMIT 5
    ''', params)
    top_expenses = cursor.fetchall()
    
    cursor.execute(f'''
        SELECT category, SUM(amount), COUNT(*) 
        FROM transactions 
        WHERE user_id = ? AND type = "income" AND {date_filter}
        GROUP BY category 
        ORDER BY SUM(amount) DESC 
        LIMIT 5
    ''', params)
    top_income = cursor.fetchall()
    
    # L·∫•y giao d·ªãch l·ªõn nh·∫•t
    cursor.execute(f'''
        SELECT amount, category, description, date 
        FROM transactions 
        WHERE user_id = ? AND {date_filter}
        ORDER BY amount DESC 
        LIMIT 3
    ''', params)
    biggest_transactions = cursor.fetchall()
    
    conn.close()
    
    # T·∫°o embed
    embed = discord.Embed(title=title, color=0x6c5ce7)
    
    # T√≥m t·∫Øt chung
    total_income = sum(row[1] for row in summary if row[0] == 'income')
    total_expense = sum(row[1] for row in summary if row[0] == 'expense')
    total_transactions = sum(row[2] for row in summary)
    net_amount = total_income - total_expense
    
    summary_text = f"""
    üí∞ **Thu nh·∫≠p**: {format_money(total_income)}
    üí∏ **Chi ti√™u**: {format_money(total_expense)}
    üìà **R√≤ng**: {format_money(net_amount)}
    üî¢ **Giao d·ªãch**: {total_transactions} l·∫ßn
    """
    embed.add_field(name="üíº **T·ªïng Quan**", value=summary_text, inline=False)
    
    # Top chi ti√™u
    if top_expenses:
        expense_text = ""
        for cat, amount, count in top_expenses[:3]:
            expense_text += f"**{cat}**: {format_money(amount)} ({count} l·∫ßn)\n"
        embed.add_field(name="üî• **Top Chi Ti√™u**", value=expense_text, inline=True)
    
    # Top thu nh·∫≠p
    if top_income:
        income_text = ""
        for cat, amount, count in top_income[:3]:
            income_text += f"**{cat}**: {format_money(amount)} ({count} l·∫ßn)\n"
        embed.add_field(name="üíé **Top Thu Nh·∫≠p**", value=income_text, inline=True)
    
    # Giao d·ªãch l·ªõn nh·∫•t
    if biggest_transactions:
        big_text = ""
        for amount, cat, desc, date in biggest_transactions[:2]:
            big_text += f"**{format_money(amount)}** - {cat}\n_{desc[:30]}..._\n"
        embed.add_field(name="üèÜ **Giao D·ªãch L·ªõn Nh·∫•t**", value=big_text, inline=False)
    
    # Ph√¢n t√≠ch
    if total_income > 0:
        savings_rate = ((total_income - total_expense) / total_income) * 100
        if savings_rate > 20:
            analysis = "üéâ Tuy·ªát v·ªùi! B·∫°n ti·∫øt ki·ªám ƒë∆∞·ª£c nhi·ªÅu."
        elif savings_rate > 10:
            analysis = "üëç Kh√° t·ªët! Ti·∫øp t·ª•c duy tr√¨."
        elif savings_rate > 0:
            analysis = "‚ö†Ô∏è N√™n ti·∫øt ki·ªám nhi·ªÅu h∆°n."
        else:
            analysis = "üö® Chi ti√™u v∆∞·ª£t thu nh·∫≠p!"
        
        embed.add_field(
            name="üîç **Ph√¢n T√≠ch**",
            value=f"T·ª∑ l·ªá ti·∫øt ki·ªám: {savings_rate:.1f}%\n{analysis}",
            inline=False
        )
    
    embed.set_footer(text=f"C·∫≠p nh·∫≠t: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    await ctx.send(embed=embed)

# ==== L·ªÜNH BUDGET ====
@bot.command(name='budget')
async def budget(ctx, category: str = None, amount: int = None):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    if category is None:
        # Hi·ªÉn th·ªã t·∫•t c·∫£ budgets
        current_month = datetime.now().strftime('%Y-%m')
        cursor.execute('''
            SELECT b.category, b.amount, COALESCE(SUM(t.amount), 0) as spent
            FROM budgets b
            LEFT JOIN transactions t ON b.category = t.category 
                AND t.user_id = b.user_id 
                AND t.type = "expense" 
                AND t.date LIKE ?
            WHERE b.user_id = ? AND b.period = "monthly"
            GROUP BY b.category, b.amount
        ''', (f'{current_month}%', user_id))
        budgets = cursor.fetchall()
        
        if not budgets:
            await ctx.send("üì≠ B·∫°n ch∆∞a ƒë·∫∑t ng√¢n s√°ch n√†o. D√πng `/budget [danh m·ª•c] [s·ªë ti·ªÅn]`")
            return
        
        embed = discord.Embed(title="üí≥ Ng√¢n S√°ch Th√°ng N√†y", color=0x3498db)
        for cat, budget_amt, spent in budgets:
            percentage = (spent / budget_amt) * 100 if budget_amt > 0 else 0
            remaining = budget_amt - spent
            
            if percentage > 100:
                status = "üö® V∆∞·ª£t ng√¢n s√°ch!"
                color_emoji = "üî¥"
            elif percentage > 80:
                status = "‚ö†Ô∏è S·∫Øp h·∫øt"
                color_emoji = "üü°"
            else:
                status = "‚úÖ An to√†n"
                color_emoji = "üü¢"
            
            progress_bar = create_progress_bar(spent, budget_amt, 15)
            embed.add_field(
                name=f"{color_emoji} **{cat}**",
                value=f"Ng√¢n s√°ch: {format_money(budget_amt)}\n"
                      f"ƒê√£ chi: {format_money(spent)} ({percentage:.1f}%)\n"
                      f"C√≤n l·∫°i: {format_money(remaining)}\n"
                      f"{progress_bar}\n{status}",
                inline=True
            )
    
    elif amount is None:
        await ctx.send("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn ng√¢n s√°ch: `/budget [danh m·ª•c] [s·ªë ti·ªÅn]`")
        return
    
    else:
        # ƒê·∫∑t budget m·ªõi
        if amount <= 0:
            await ctx.send("‚ùå Ng√¢n s√°ch ph·∫£i l·ªõn h∆°n 0!")
            return
        
        # Ki·ªÉm tra xem ƒë√£ c√≥ budget cho category n√†y ch∆∞a
        cursor.execute('SELECT amount FROM budgets WHERE user_id = ? AND category = ? AND period = "monthly"', 
                      (user_id, category))
        existing = cursor.fetchone()
        
        if existing:
            cursor.execute('UPDATE budgets SET amount = ? WHERE user_id = ? AND category = ? AND period = "monthly"', 
                          (amount, user_id, category))
            action = "c·∫≠p nh·∫≠t"
        else:
            start_date = datetime.now().replace(day=1).strftime('%Y-%m-%d')
            end_date = (datetime.now().replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
            cursor.execute('''
                INSERT INTO budgets (user_id, category, amount, period, start_date, end_date) 
                VALUES (?, ?, ?, "monthly", ?, ?)
            ''', (user_id, category, amount, start_date, end_date.strftime('%Y-%m-%d')))
            action = "ƒë·∫∑t"
        
        conn.commit()
        
        embed = discord.Embed(
            title=f"üí≥ ƒê√£ {action} ng√¢n s√°ch",
            description=f"**{category}**: {format_money(amount)}/th√°ng",
            color=0x00ff41
        )
        
        # Ki·ªÉm tra chi ti√™u hi·ªán t·∫°i
        current_month = datetime.now().strftime('%Y-%m')
        cursor.execute('''
            SELECT COALESCE(SUM(amount), 0) 
            FROM transactions 
            WHERE user_id = ? AND category = ? AND type = "expense" AND date LIKE ?
        ''', (user_id, category, f'{current_month}%'))
        current_spent = cursor.fetchone()[0]
        
        if current_spent > 0:
            percentage = (current_spent / amount) * 100
            embed.add_field(
                name="üìä T√¨nh h√¨nh hi·ªán t·∫°i",
                value=f"ƒê√£ chi: {format_money(current_spent)} ({percentage:.1f}%)\n"
                      f"C√≤n l·∫°i: {format_money(amount - current_spent)}",
                inline=False
            )
    
    conn.close()
    await ctx.send(embed=embed)

# ==== L·ªÜNH SAVINGS GOALS ====
@bot.command(name='savings', aliases=['save', 'goal_save'])
async def savings(ctx, action: str = "list", name: str = None, target: int = None, *, deadline: str = None):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    if action == "list" or action is None:
        # Hi·ªÉn th·ªã t·∫•t c·∫£ savings goals
        cursor.execute('SELECT * FROM savings_goals WHERE user_id = ? ORDER BY deadline ASC', (user_id,))
        goals = cursor.fetchall()
        
        if not goals:
            await ctx.send("üì≠ B·∫°n ch∆∞a c√≥ m·ª•c ti√™u ti·∫øt ki·ªám n√†o. D√πng `/savings add [t√™n] [s·ªë ti·ªÅn] [deadline]`")
            return
        
        embed = discord.Embed(title="üè¶ M·ª•c Ti√™u Ti·∫øt Ki·ªám", color=0x27ae60)
        
        for goal in goals:
            goal_id, _, name, target_amt, current_amt, deadline, desc, created = goal
            progress = (current_amt / target_amt) * 100 if target_amt > 0 else 0
            remaining = target_amt - current_amt
            
            # T√≠nh s·ªë ng√†y c√≤n l·∫°i
            if deadline:
                try:
                    deadline_date = datetime.strptime(deadline, '%Y-%m-%d')
                    days_left = (deadline_date - datetime.now()).days
                    if days_left > 0:
                        deadline_text = f"‚è∞ C√≤n {days_left} ng√†y"
                    elif days_left == 0:
                        deadline_text = "‚è∞ H√¥m nay!"
                    else:
                        deadline_text = f"‚è∞ Tr·ªÖ {abs(days_left)} ng√†y"
                except:
                    deadline_text = f"‚è∞ {deadline}"
            else:
                deadline_text = "‚è∞ Kh√¥ng th·ªùi h·∫°n"
            
            progress_bar = create_progress_bar(current_amt, target_amt, 15)
            
            embed.add_field(
                name=f"üíé **{name}**",
                value=f"M·ª•c ti√™u: {format_money(target_amt)}\n"
                      f"ƒê√£ c√≥: {format_money(current_amt)} ({progress:.1f}%)\n"
                      f"C√≤n thi·∫øu: {format_money(remaining)}\n"
                      f"{progress_bar}\n"
                      f"{deadline_text}",
                inline=True
            )
    
    elif action == "add":
        if not all([name, target, deadline]):
            await ctx.send("‚ùå Thi·∫øu th√¥ng tin: `/savings add [t√™n] [s·ªë ti·ªÅn] [deadline YYYY-MM-DD]`")
            return
        
        if target <= 0:
            await ctx.send("‚ùå S·ªë ti·ªÅn m·ª•c ti√™u ph·∫£i l·ªõn h∆°n 0!")
            return
        
        # Validate deadline
        try:
            deadline_date = datetime.strptime(deadline, '%Y-%m-%d')
            if deadline_date <= datetime.now():
                await ctx.send("‚ùå Th·ªùi h·∫°n ph·∫£i l√† ng√†y trong t∆∞∆°ng lai!")
                return
        except ValueError:
            await ctx.send("‚ùå Format ng√†y kh√¥ng ƒë√∫ng! D√πng YYYY-MM-DD (v√≠ d·ª•: 2024-12-31)")
            return
        
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO savings_goals (user_id, name, target_amount, current_amount, deadline, created_date) 
            VALUES (?, ?, ?, 0, ?, ?)
        ''', (user_id, name, target, deadline, now))
        
        conn.commit()
        
        embed = discord.Embed(
            title="üéØ M·ª•c Ti√™u Ti·∫øt Ki·ªám M·ªõi",
            description=f"ƒê√£ t·∫°o m·ª•c ti√™u **{name}**",
            color=0x27ae60
        )
        embed.add_field(name="üí∞ S·ªë ti·ªÅn", value=format_money(target), inline=True)
        embed.add_field(name="üìÖ Th·ªùi h·∫°n", value=deadline, inline=True)
        
        days_left = (deadline_date - datetime.now()).days
        embed.add_field(name="‚è∞ Th·ªùi gian", value=f"{days_left} ng√†y", inline=True)
        
    elif action == "deposit":
        if not all([name, target]):  # target ƒë∆∞·ª£c d√πng l√†m amount deposit
            await ctx.send("‚ùå Thi·∫øu th√¥ng tin: `/savings deposit [t√™n] [s·ªë ti·ªÅn]`")
            return
        
        amount = target  # Rename for clarity
        if amount <= 0:
            await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
            return
        
        # Ki·ªÉm tra goal c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute('SELECT * FROM savings_goals WHERE user_id = ? AND name = ?', (user_id, name))
        goal = cursor.fetchone()
        
        if not goal:
            await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u ti·∫øt ki·ªám '{name}'")
            return
        
        goal_id, _, goal_name, target_amt, current_amt, deadline, desc, created = goal
        
        # Ki·ªÉm tra s·ªë d∆∞
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = cursor.fetchone()[0]
        
        if balance < amount:
            await ctx.send(f"‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞! S·ªë d∆∞ hi·ªán t·∫°i: {format_money(balance)}")
            return
        
        # C·∫≠p nh·∫≠t s·ªë d∆∞ v√† savings goal
        cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
        cursor.execute('UPDATE savings_goals SET current_amount = current_amount + ? WHERE id = ?', (amount, goal_id))
        
        # Th√™m transaction
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO transactions (user_id, amount, type, category, description, date) 
            VALUES (?, ?, "expense", "Ti·∫øt ki·ªám", ?, ?)
        ''', (user_id, amount, f"G·ª≠i ti·∫øt ki·ªám: {name}", now))
        
        conn.commit()
        
        # L·∫•y th√¥ng tin m·ªõi
        cursor.execute('SELECT current_amount FROM savings_goals WHERE id = ?', (goal_id,))
        new_amount = cursor.fetchone()[0]
        progress = (new_amount / target_amt) * 100
        
        embed = discord.Embed(
            title="üè¶ ƒê√£ G·ª≠i Ti·∫øt Ki·ªám",
            description=f"G·ª≠i {format_money(amount)} v√†o **{name}**",
            color=0x27ae60
        )
        embed.add_field(name="üí∞ S·ªë d∆∞ m·ªõi", value=format_money(new_amount), inline=True)
        embed.add_field(name="üéØ Ti·∫øn ƒë·ªô", value=f"{progress:.1f}%", inline=True)
        embed.add_field(name="üìà C√≤n thi·∫øu", value=format_money(target_amt - new_amount), inline=True)
        
        if new_amount >= target_amt:
            embed.add_field(
                name="üéâ Ch√∫c M·ª´ng!",
                value=f"B·∫°n ƒë√£ ho√†n th√†nh m·ª•c ti√™u **{name}**!",
                inline=False
            )
    
    conn.close()
    await ctx.send(embed=embed)

# ==== L·ªÜNH HISTORY N√ÇNG C√ÇP ====
@bot.command(name='history', aliases=['hist', 'h'])
async def history(ctx, days: int = 7, category: str = None):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    limit_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
    
    if category:
        cursor.execute('''
            SELECT amount, type, category, description, date 
            FROM transactions 
            WHERE user_id = ? AND date >= ? AND category = ?
            ORDER BY date DESC 
            LIMIT ?
        ''', (user_id, limit_date, category, CONFIG['MAX_TRANSACTIONS_DISPLAY']))
        title = f"üìã L·ªãch s·ª≠ {category} ({days} ng√†y)"
    else:
        cursor.execute('''
            SELECT amount, type, category, description, date 
            FROM transactions 
            WHERE user_id = ? AND date >= ? 
            ORDER BY date DESC 
            LIMIT ?
        ''', (user_id, limit_date, CONFIG['MAX_TRANSACTIONS_DISPLAY']))
        title = f"üìã L·ªãch s·ª≠ giao d·ªãch ({days} ng√†y)"
    
    records = cursor.fetchall()
    conn.close()
    
    if not records:
        await ctx.send(f"üì≠ Kh√¥ng c√≥ giao d·ªãch n√†o trong {days} ng√†y qua.")
        return
    
    # T·∫°o embed v·ªõi pagination
    embeds = []
    items_per_page = 8
    
    for i in range(0, len(records), items_per_page):
        embed = discord.Embed(title=title, color=0x3498db)
        page_records = records[i:i+items_per_page]
        
        for amt, ttype, cat, desc, date in page_records:
            # Icon theo type
            icon = "üíµ" if ttype == "income" else "üí∏"
            symbol = "+" if ttype == "income" else "-"
            
            # Format date
            try:
                date_obj = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                date_str = date_obj.strftime('%d/%m %H:%M')
            except:
                date_str = date
            
            # Truncate description
            if len(desc) > 30:
                desc = desc[:27] + "..."
            
            value = f"{symbol}{format_money(amt)}\nüìÇ {cat}\nüìù {desc}\nüïê {date_str}"
            embed.add_field(name=f"{icon} Giao d·ªãch", value=value, inline=True)
        
        # Footer
        page_num = (i // items_per_page) + 1
        total_pages = (len(records) - 1) // items_per_page + 1
        embed.set_footer(text=f"Trang {page_num}/{total_pages} ‚Ä¢ T·ªïng {len(records)} giao d·ªãch")
        
        embeds.append(embed)
    
    # G·ª≠i embed ƒë·∫ßu ti√™n
    await ctx.send(embed=embeds[0])
    
    # N·∫øu c√≥ nhi·ªÅu trang, th√™m reactions ƒë·ªÉ navigate
    if len(embeds) > 1:
        # Implement pagination logic here if needed
        pass

# ==== L·ªÜNH TRANSFER ====
@bot.command(name='transfer', aliases=['send', 'tf'])
async def transfer(ctx, amount: int, recipient: discord.Member, *, description: str = "Chuy·ªÉn ti·ªÅn"):
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return
    
    if recipient.id == ctx.author.id:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!")
        return
    
    user_id = ctx.author.id
    recipient_id = recipient.id
    
    get_or_create_user(user_id, ctx.author.display_name)
    get_or_create_user(recipient_id, recipient.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # Ki·ªÉm tra s·ªë d∆∞
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    sender_balance = cursor.fetchone()[0]
    
    if sender_balance < amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒê·ªß S·ªë D∆∞",
            description=f"B·∫°n c·∫ßn th√™m {format_money(amount - sender_balance)}",
            color=0xff4757
        )
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=format_money(sender_balance))
        await ctx.send(embed=embed)
        return
    
    # Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, recipient_id))
    
    # Ghi l·∫°i transactions
    cursor.execute('''
        INSERT INTO transactions (user_id, amount, type, category, description, date) 
        VALUES (?, ?, "expense", "Chuy·ªÉn ti·ªÅn", ?, ?)
    ''', (user_id, amount, f"Chuy·ªÉn cho {recipient.display_name}: {description}", now))
    
    cursor.execute('''
        INSERT INTO transactions (user_id, amount, type, category, description, date) 
        VALUES (?, ?, "income", "Chuy·ªÉn ti·ªÅn", ?, ?)
    ''', (recipient_id, amount, f"Nh·∫≠n t·ª´ {ctx.author.display_name}: {description}", now))
    
    conn.commit()
    conn.close()
    
    # T·∫°o embed th√¥ng b√°o
    embed = discord.Embed(
        title="üí∏ Chuy·ªÉn Ti·ªÅn Th√†nh C√¥ng",
        description=f"ƒê√£ chuy·ªÉn {format_money(amount)} cho {recipient.mention}",
        color=0x00ff41
    )
    embed.add_field(name="üìù M√¥ t·∫£", value=description, inline=True)
    embed.add_field(name="‚è∞ Th·ªùi gian", value=now, inline=True)
    
    await ctx.send(embed=embed)
    
    # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
    try:
        recipient_embed = discord.Embed(
            title="üí∞ Nh·∫≠n Ti·ªÅn",
            description=f"B·∫°n nh·∫≠n ƒë∆∞·ª£c {format_money(amount)} t·ª´ {ctx.author.display_name}",
            color=0x00ff41
        )
        recipient_embed.add_field(name="üìù M√¥ t·∫£", value=description)
        await recipient.send(embed=recipient_embed)
    except:
        pass  # Kh√¥ng th·ªÉ g·ª≠i DM

# ==== L·ªÜNH CATEGORY ====
@bot.command(name='category', aliases=['cat'])
async def category(ctx, action: str = "list", *, name: str = None):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    if action == "list":
        categories = get_categories(user_id)
        
        income_cats = [cat for cat in categories if cat[3] == 'income']
        expense_cats = [cat for cat in categories if cat[3] == 'expense']
        
        embed = discord.Embed(title="üìÇ Danh M·ª•c", color=0x3498db)
        
        if income_cats:
            income_text = ""
            for cat in income_cats[:10]:  # Limit display
                icon = cat[5] if cat[5] else "üí∞"
                income_text += f"{icon} {cat[2]}\n"
            embed.add_field(name="üíµ Thu Nh·∫≠p", value=income_text, inline=True)
        
        if expense_cats:
            expense_text = ""
            for cat in expense_cats[:10]:
                icon = cat[5] if cat[5] else "üí∏"
                expense_text += f"{icon} {cat[2]}\n"
            embed.add_field(name="üí∏ Chi Ti√™u", value=expense_text, inline=True)
        
        await ctx.send(embed=embed)
    
    # Implement add/remove category logic here if needed

# ==== L·ªÜNH EXPORT/IMPORT ====
@bot.command(name='export')
async def export_data(ctx, format_type: str = "json"):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
    cursor.execute('SELECT * FROM transactions WHERE user_id = ? ORDER BY date DESC', (user_id,))
    transactions = cursor.fetchall()
    
    cursor.execute('SELECT * FROM savings_goals WHERE user_id = ?', (user_id,))
    goals = cursor.fetchall()
    
    conn.close()
    
    if format_type.lower() == "csv":
        # CSV export
        csv_content = "Date,Amount,Type,Category,Description\n"
        for trans in transactions:
            csv_content += f"{trans[6]},{trans[2]},{trans[3]},{trans[4]},{trans[5]}\n"
        
        with io.StringIO(csv_content) as buffer:
            file = discord.File(buffer, filename=f"finance_data_{user_id}.csv")
    else:
        # JSON export
        data = {
            "user_id": user_id,
            "export_date": datetime.now().isoformat(),
            "transactions": [
                {
                    "date": trans[6],
                    "amount": trans[2],
                    "type": trans[3],
                    "category": trans[4],
                    "description": trans[5]
                } for trans in transactions
            ],
            "savings_goals": [
                {
                    "name": goal[2],
                    "target": goal[3],
                    "current": goal[4],
                    "deadline": goal[5]
                } for goal in goals
            ]
        }
        
        json_content = json.dumps(data, ensure_ascii=False, indent=2)
        buffer = io.StringIO(json_content)
        file = discord.File(buffer, filename=f"finance_data_{user_id}.json")
    
    embed = discord.Embed(
        title="üì§ Xu·∫•t D·ªØ Li·ªáu",
        description=f"D·ªØ li·ªáu t√†i ch√≠nh c·ªßa b·∫°n ({len(transactions)} giao d·ªãch)",
        color=0x27ae60
    )
    
    await ctx.send(embed=embed, file=file)

# ==== L·ªÜNH SETTINGS ====
@bot.command(name='settings', aliases=['config'])
async def settings(ctx, setting: str = None, *, value: str = None):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    if setting is None:
        # Hi·ªÉn th·ªã t·∫•t c·∫£ settings
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()
        
        embed = discord.Embed(title="‚öôÔ∏è C√†i ƒê·∫∑t C√° Nh√¢n", color=0x9b59b6)
        embed.add_field(name="üí∞ Ti·ªÅn t·ªá", value=user_data[5] or "VND", inline=True)
        embed.add_field(name="üåç M√∫i gi·ªù", value=user_data[6] or "Asia/Ho_Chi_Minh", inline=True)
        embed.add_field(name="üîî Th√¥ng b√°o", value="B·∫≠t" if user_data[7] else "T·∫Øt", inline=True)
        embed.add_field(name="üí≥ Ng√¢n s√°ch th√°ng", value=format_money(user_data[4]) if user_data[4] else "Ch∆∞a ƒë·∫∑t", inline=True)
        
        embed.add_field(
            name="üìù C√°ch s·ª≠ d·ª•ng",
            value="`/settings currency VND` - ƒê·ªïi ti·ªÅn t·ªá\n"
                  "`/settings notifications on/off` - B·∫≠t/t·∫Øt th√¥ng b√°o\n"
                  "`/settings budget [s·ªë ti·ªÅn]` - ƒê·∫∑t ng√¢n s√°ch th√°ng",
            inline=False
        )
        
    elif setting == "currency":
        if value and value.upper() in ['VND', 'USD', 'EUR']:
            cursor.execute('UPDATE users SET currency = ? WHERE user_id = ?', (value.upper(), user_id))
            conn.commit()
            embed = discord.Embed(title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti·ªÅn t·ªá", color=0x00ff41)
            embed.add_field(name="Ti·ªÅn t·ªá m·ªõi", value=value.upper())
        else:
            embed = discord.Embed(title="‚ùå Ti·ªÅn t·ªá kh√¥ng h·ª£p l·ªá", color=0xff4757)
            embed.add_field(name="H·ªó tr·ª£", value="VND, USD, EUR")
    
    elif setting == "notifications":
        if value and value.lower() in ['on', 'off', 'b·∫≠t', 't·∫Øt']:
            notify_on = value.lower() in ['on', 'b·∫≠t']
            cursor.execute('UPDATE users SET notifications = ? WHERE user_id = ?', (notify_on, user_id))
            conn.commit()
            status = "b·∫≠t" if notify_on else "t·∫Øt"
            embed = discord.Embed(title=f"‚úÖ ƒê√£ {status} th√¥ng b√°o", color=0x00ff41)
        else:
            embed = discord.Embed(title="‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", color=0xff4757)
            embed.add_field(name="S·ª≠ d·ª•ng", value="on/off ho·∫∑c b·∫≠t/t·∫Øt")
    
    elif setting == "budget":
        try:
            budget_amount = int(value) if value else 0
            if budget_amount < 0:
                raise ValueError
            cursor.execute('UPDATE users SET monthly_budget = ? WHERE user_id = ?', (budget_amount, user_id))
            conn.commit()
            embed = discord.Embed(title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t ng√¢n s√°ch th√°ng", color=0x00ff41)
            embed.add_field(name="Ng√¢n s√°ch m·ªõi", value=format_money(budget_amount) if budget_amount else "Kh√¥ng gi·ªõi h·∫°n")
        except ValueError:
            embed = discord.Embed(title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá", color=0xff4757)
    
    else:
        embed = discord.Embed(title="‚ùå C√†i ƒë·∫∑t kh√¥ng t·ªìn t·∫°i", color=0xff4757)
        embed.add_field(name="C√≥ s·∫µn", value="currency, notifications, budget")
    
    conn.close()
    await ctx.send(embed=embed)

# ==== L·ªÜNH SEARCH ====
@bot.command(name='search', aliases=['find'])
async def search(ctx, *, keyword: str):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # T√¨m ki·∫øm trong description v√† category
    cursor.execute('''
        SELECT amount, type, category, description, date 
        FROM transactions 
        WHERE user_id = ? AND (
            LOWER(description) LIKE LOWER(?) OR 
            LOWER(category) LIKE LOWER(?)
        )
        ORDER BY date DESC 
        LIMIT 20
    ''', (user_id, f'%{keyword}%', f'%{keyword}%'))
    
    results = cursor.fetchall()
    conn.close()
    
    if not results:
        await ctx.send(f"üîç Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o v·ªõi t·ª´ kh√≥a '{keyword}'")
        return
    
    embed = discord.Embed(
        title=f"üîç K·∫øt Qu·∫£ T√¨m Ki·∫øm: '{keyword}'",
        description=f"T√¨m th·∫•y {len(results)} giao d·ªãch",
        color=0x3498db
    )
    
    for amt, ttype, cat, desc, date in results[:10]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 10
        icon = "üíµ" if ttype == "income" else "üí∏"
        symbol = "+" if ttype == "income" else "-"
        
        try:
            date_obj = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
            date_str = date_obj.strftime('%d/%m/%Y')
        except:
            date_str = date
        
        embed.add_field(
            name=f"{icon} {symbol}{format_money(amt)}",
            value=f"üìÇ {cat}\nüìù {desc}\nüìÖ {date_str}",
            inline=True
        )
    
    if len(results) > 10:
        embed.set_footer(text=f"... v√† {len(results) - 10} k·∫øt qu·∫£ kh√°c")
    
    await ctx.send(embed=embed)

# ==== L·ªÜNH ACHIEVEMENTS ====
@bot.command(name='achievements', aliases=['achieve'])
async def achievements(ctx):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # L·∫•y th·ªëng k√™ ƒë·ªÉ t√≠nh achievements
    cursor.execute('SELECT COUNT(*) FROM transactions WHERE user_id = ?', (user_id,))
    total_transactions = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "income"', (user_id,))
    total_income = cursor.fetchone()[0] or 0
    
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    current_balance = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(DISTINCT DATE(date)) FROM transactions WHERE user_id = ?', (user_id,))
    active_days = cursor.fetchone()[0]
    
    conn.close()
    
    # T√≠nh achievements
    achievements = []
    
    if total_transactions >= 1:
        achievements.append(("üå±", "B∆∞·ªõc ƒë·∫ßu ti√™n", "Th·ª±c hi·ªán giao d·ªãch ƒë·∫ßu ti√™n"))
    if total_transactions >= 50:
        achievements.append(("üìä", "Chuy√™n gia ghi ch√©p", "50 giao d·ªãch ƒë√£ ghi"))
    if total_transactions >= 100:
        achievements.append(("üèÜ", "Si√™u sao t√†i ch√≠nh", "100 giao d·ªãch ƒë√£ ghi"))
    
    if total_income >= 10000000:  # 10M
        achievements.append(("üí∞", "Tri·ªáu ph√∫ nh·ªè", "T·ªïng thu nh·∫≠p 10M+"))
    if total_income >= 100000000:  # 100M
        achievements.append(("üíé", "ƒê·∫°i gia", "T·ªïng thu nh·∫≠p 100M+"))
    
    if current_balance >= 5000000:  # 5M
        achievements.append(("üè¶", "Ti·∫øt ki·ªám gi·ªèi", "S·ªë d∆∞ 5M+"))
    if current_balance >= 50000000:  # 50M
        achievements.append(("üëë", "Vua ti·∫øt ki·ªám", "S·ªë d∆∞ 50M+"))
    
    if active_days >= 7:
        achievements.append(("üî•", "Streak 7 ng√†y", "Ho·∫°t ƒë·ªông 7 ng√†y"))
    if active_days >= 30:
        achievements.append(("‚≠ê", "Ng∆∞·ªùi b·ªÅn b·ªâ", "Ho·∫°t ƒë·ªông 30 ng√†y"))
    
    embed = discord.Embed(title="üèÜ Th√†nh T√≠ch", color=0xf39c12)
    
    if achievements:
        for icon, name, desc in achievements:
            embed.add_field(name=f"{icon} **{name}**", value=desc, inline=True)
    else:
        embed.add_field(name="üå± Ch∆∞a c√≥ th√†nh t√≠ch", value="H√£y b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot ƒë·ªÉ m·ªü kh√≥a!", inline=False)
    
    # Progress ƒë·∫øn achievement ti·∫øp theo
    next_achievements = []
    if total_transactions < 50:
        next_achievements.append(f"üìä {50 - total_transactions} giao d·ªãch n·ªØa ‚Üí Chuy√™n gia ghi ch√©p")
    if current_balance < 5000000:
        need = 5000000 - current_balance
        next_achievements.append(f"üè¶ {format_money(need)} n·ªØa ‚Üí Ti·∫øt ki·ªám gi·ªèi")
    
    if next_achievements:
        embed.add_field(
            name="üéØ M·ª•c ti√™u ti·∫øp theo",
            value="\n".join(next_achievements[:3]),
            inline=False
        )
    
    await ctx.send(embed=embed)

# ==== L·ªÜNH REPORT ====
@bot.command(name='report')
async def report(ctx, period: str = "month"):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    # X√°c ƒë·ªãnh period
    if period == "week":
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        title = "üìã B√°o C√°o Tu·∫ßn"
        date_filter = "date >= ?"
        params = (user_id, start_date)
    elif period == "year":
        current_year = datetime.now().year
        title = f"üìã B√°o C√°o NƒÉm {current_year}"
        date_filter = "date LIKE ?"
        params = (user_id, f'{current_year}%')
    else:  # month
        current_month = datetime.now().strftime('%Y-%m')
        title = f"üìã B√°o C√°o Th√°ng {current_month}"
        date_filter = "date LIKE ?"
        params = (user_id, f'{current_month}%')
    
    # L·∫•y d·ªØ li·ªáu t·ªïng h·ª£p
    cursor.execute(f'''
        SELECT 
            SUM(CASE WHEN type = "income" THEN amount ELSE 0 END) as total_income,
            SUM(CASE WHEN type = "expense" THEN amount ELSE 0 END) as total_expense,
            COUNT(*) as total_transactions,
            AVG(CASE WHEN type = "expense" THEN amount ELSE NULL END) as avg_expense
        FROM transactions 
        WHERE user_id = ? AND {date_filter}
    ''', params)
    
    summary = cursor.fetchone()
    total_income, total_expense, total_trans, avg_expense = summary
    total_income = total_income or 0
    total_expense = total_expense or 0
    avg_expense = avg_expense or 0
    
    # Top categories
    cursor.execute(f'''
        SELECT category, SUM(amount), COUNT(*) 
        FROM transactions 
        WHERE user_id = ? AND type = "expense" AND {date_filter}
        GROUP BY category 
        ORDER BY SUM(amount) DESC 
        LIMIT 5
    ''', params)
    top_expenses = cursor.fetchall()
    
    # L·∫•y trends (so s√°nh v·ªõi period tr∆∞·ªõc)
    if period == "month":
        prev_month = (datetime.now().replace(day=1) - timedelta(days=1)).strftime('%Y-%m')
        cursor.execute('''
            SELECT 
                SUM(CASE WHEN type = "income" THEN amount ELSE 0 END),
                SUM(CASE WHEN type = "expense" THEN amount ELSE 0 END)
            FROM transactions 
            WHERE user_id = ? AND date LIKE ?
        ''', (user_id, f'{prev_month}%'))
        prev_data = cursor.fetchone()
        prev_income, prev_expense = prev_data[0] or 0, prev_data[1] or 0
    
    conn.close()
    
    # T·∫°o embed b√°o c√°o
    embed = discord.Embed(title=title, color=0x2ecc71)
    
    # T√≥m t·∫Øt t√†i ch√≠nh
    net_amount = total_income - total_expense
    embed.add_field(
        name="üí∞ T·ªïng Quan",
        value=f"Thu nh·∫≠p: {format_money(total_income)}\n"
              f"Chi ti√™u: {format_money(total_expense)}\n"
              f"**R√≤ng: {format_money(net_amount)}**\n"
              f"Giao d·ªãch: {total_trans} l·∫ßn",
        inline=True
    )
    
    # Ph√¢n t√≠ch
    if total_income > 0:
        savings_rate = (net_amount / total_income) * 100
        expense_rate = (total_expense / total_income) * 100
        
        embed.add_field(
            name="üìä Ph√¢n T√≠ch",
            value=f"T·ª∑ l·ªá ti·∫øt ki·ªám: {savings_rate:.1f}%\n"
                  f"T·ª∑ l·ªá chi ti√™u: {expense_rate:.1f}%\n"
                  f"Chi ti√™u TB: {format_money(avg_expense)}",
            inline=True
        )
    
    # Trends (ch·ªâ cho month)
    if period == "month" and prev_income > 0:
        income_change = ((total_income - prev_income) / prev_income) * 100
        expense_change = ((total_expense - prev_expense) / prev_expense) * 100 if prev_expense > 0 else 0
        
        income_trend = "üìà" if income_change > 0 else "üìâ" if income_change < 0 else "‚û°Ô∏è"
        expense_trend = "üìà" if expense_change > 0 else "üìâ" if expense_change < 0 else "‚û°Ô∏è"
        
        embed.add_field(
            name="üìà Xu H∆∞·ªõng",
            value=f"{income_trend} Thu nh·∫≠p: {income_change:+.1f}%\n"
                  f"{expense_trend} Chi ti√™u: {expense_change:+.1f}%",
            inline=True
        )
    
    # Top chi ti√™u
    if top_expenses:
        expense_text = ""
        for cat, amount, count in top_expenses[:5]:
            percentage = (amount / total_expense) * 100 if total_expense > 0 else 0
            expense_text += f"**{cat}**: {format_money(amount)} ({percentage:.1f}%)\n"
        embed.add_field(name="üî• Top Chi Ti√™u", value=expense_text, inline=False)
    
    # L·ªùi khuy√™n
    advice = []
    if total_expense > total_income:
        advice.append("‚ö†Ô∏è Chi ti√™u v∆∞·ª£t thu nh·∫≠p!")
    elif net_amount > 0:
        advice.append("üéâ B·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c ti·ªÅn!")
    
    if avg_expense > 500000:  # 500k
        advice.append("üí° H√£y theo d√µi chi ti√™u h√†ng ng√†y")
    
    if advice:
        embed.add_field(name="üí≠ L·ªùi Khuy√™n", value="\n".join(advice), inline=False)
    
    embed.set_footer(text=f"B√°o c√°o t·∫°o l√∫c {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    await ctx.send(embed=embed)

# ==== L·ªÜNH GOAL N√ÇNG C·∫§P ====
@bot.command(name='goal', aliases=['target'])
async def goal(ctx, amount: int = None):
    user_id = ctx.author.id
    get_or_create_user(user_id, ctx.author.display_name)

    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()

    if amount is None:
        # Hi·ªÉn th·ªã m·ª•c ti√™u hi·ªán t·∫°i
        cursor.execute('SELECT balance, goal FROM users WHERE user_id = ?', (user_id,))
        balance, goal_amt = cursor.fetchone()
        
        if goal_amt == 0:
            embed = discord.Embed(
                title="üéØ M·ª•c Ti√™u C·ªßa B·∫°n",
                description="B·∫°n ch∆∞a ƒë·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám n√†o",
                color=0x95a5a6
            )
            embed.add_field(
                name="üí° H∆∞·ªõng d·∫´n",
                value="D√πng `/goal [s·ªë ti·ªÅn]` ƒë·ªÉ ƒë·∫∑t m·ª•c ti√™u\nV√≠ d·ª•: `/goal 50000000`",
                inline=False
            )
        else:
            progress = min((balance / goal_amt) * 100, 100)
            remain = max(goal_amt - balance, 0)
            
            # T√≠nh th·ªùi gian d·ª± ki·∫øn
            current_month = datetime.now().strftime('%Y-%m')
            cursor.execute('''
                SELECT AVG(monthly_saving) FROM (
                    SELECT SUM(CASE WHEN type="income" THEN amount ELSE -amount END) as monthly_saving
                    FROM transactions 
                    WHERE user_id = ? AND date LIKE ?
                    GROUP BY substr(date, 1, 7)
                ) WHERE monthly_saving > 0
            ''', (user_id, f'{current_month[:4]}%'))
            avg_monthly_saving = cursor.fetchone()[0] or 0
            
            embed = discord.Embed(title="üéØ M·ª•c Ti√™u Ti·∫øt Ki·ªám", color=0x4ecdc4)
            embed.add_field(name="üéØ M·ª•c ti√™u", value=format_money(goal_amt), inline=True)
            embed.add_field(name="üí∞ Hi·ªán t·∫°i", value=format_money(balance), inline=True)
            embed.add_field(name="üìä Ti·∫øn ƒë·ªô", value=f"{progress:.1f}%", inline=True)
            
            progress_bar = create_progress_bar(balance, goal_amt, 25)
            embed.add_field(name="üìà Thanh ti·∫øn ƒë·ªô", value=f"`{progress_bar}`", inline=False)
            
            if remain > 0:
                embed.add_field(name="üí∏ C√≤n thi·∫øu", value=format_money(remain), inline=True)
                
                if avg_monthly_saving > 0:
                    months_needed = remain / avg_monthly_saving
                    embed.add_field(
                        name="‚è∞ D·ª± ki·∫øn",
                        value=f"{months_needed:.1f} th√°ng n·ªØa",
                        inline=True
                    )
            else:
                embed.add_field(
                    name="üéâ Ch√∫c m·ª´ng!",
                    value="B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u!",
                    inline=False
                )
    else:
        # ƒê·∫∑t m·ª•c ti√™u m·ªõi
        if amount <= 0:
            await ctx.send("‚ùå M·ª•c ti√™u ph·∫£i l·ªõn h∆°n 0!")
            return
        
        cursor.execute('UPDATE users SET goal = ? WHERE user_id = ?', (amount, user_id))
        conn.commit()
        
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        current_balance = cursor.fetchone()[0]
        
        embed = discord.Embed(
            title="üéØ ƒê√£ ƒê·∫∑t M·ª•c Ti√™u M·ªõi",
            description=f"M·ª•c ti√™u: **{format_money(amount)}**",
            color=0x4ecdc4
        )
        
        if current_balance > 0:
            progress = min((current_balance / amount) * 100, 100)
            embed.add_field(name="üìä Ti·∫øn ƒë·ªô hi·ªán t·∫°i", value=f"{progress:.1f}%", inline=True)
            embed.add_field(name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i", value=format_money(current_balance), inline=True)
        
        remaining = max(amount - current_balance, 0)
        if remaining > 0:
            embed.add_field(name="üéØ C√≤n c·∫ßn", value=format_money(remaining), inline=True)

    conn.close()
    await ctx.send(embed=embed)

# ==== X·ª¨ L√ù L·ªñI N√ÇNG C·∫§P ====
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(
            title="‚ùå Thi·∫øu Tham S·ªë",
            description="Vui l√≤ng ki·ªÉm tra l·∫°i c√∫ ph√°p l·ªánh",
            color=0xff4757
        )
        embed.add_field(name="üí° G·ª£i √Ω", value="D√πng `/help` ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt")
        await ctx.send(embed=embed)
        
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói ƒê·ªãnh D·∫°ng",
            description="Ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn ho·∫∑c tham s·ªë",
            color=0xff4757
        )
        embed.add_field(name="üí° L∆∞u √Ω", value="S·ªë ti·ªÅn ph·∫£i l√† s·ªë nguy√™n (v√≠ d·ª•: 50000)")
        await ctx.send(embed=embed)
        
    elif isinstance(error, commands.CommandNotFound):
        # Kh√¥ng l√†m g√¨ cho command kh√¥ng t·ªìn t·∫°i
        pass
        
    elif isinstance(error, commands.CommandOnCooldown):
        embed = discord.Embed(
            title="‚è∞ Vui L√≤ng Ch·ªù",
            description=f"Th·ª≠ l·∫°i sau {error.retry_after:.1f} gi√¢y",
            color=0xffa502
        )
        await ctx.send(embed=embed)
        
    else:
        # Log l·ªói chi ti·∫øt
        logger.error(f"Command error in {ctx.command}: {error}", exc_info=error)
        
        embed = discord.Embed(
            title="‚ùå C√≥ L·ªói X·∫£y Ra",
            description="ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën",
            color=0xff4757
        )
        embed.add_field(name="üîß Gi·∫£i ph√°p", value="Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin")
        await ctx.send(embed=embed)

# ==== L·ªÜNH ADMIN (N·∫øu c·∫ßn) ====
@bot.command(name='admin_stats')
@commands.has_permissions(administrator=True)
async def admin_stats(ctx):
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM transactions')
    total_transactions = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(balance) FROM users')
    total_balance = cursor.fetchone()[0] or 0
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE last_active >= ?', 
                   ((datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),))
    active_users = cursor.fetchone()[0]
    
    conn.close()
    
    embed = discord.Embed(title="üìä Th·ªëng K√™ Bot", color=0xe74c3c)
    embed.add_field(name="üë• T·ªïng users", value=total_users, inline=True)
    embed.add_field(name="üí≥ T·ªïng giao d·ªãch", value=total_transactions, inline=True)
    embed.add_field(name="üí∞ T·ªïng s·ªë d∆∞", value=format_money(total_balance), inline=True)
    embed.add_field(name="üî• Users ho·∫°t ƒë·ªông (7d)", value=active_users, inline=True)
    
    await ctx.send(embed=embed)

# ==== SLASH COMMANDS (N·∫øu mu·ªën) ====
from discord import app_commands

@bot.tree.command(name="balance", description="Xem s·ªë d∆∞ v√† t·ªïng quan t√†i ch√≠nh")
async def slash_balance(interaction: discord.Interaction):
    # Chuy·ªÉn ƒë·ªïi interaction th√†nh context-like object
    ctx = await bot.get_context(interaction)
    await balance(ctx)

@bot.tree.command(name="quick_add", description="Th√™m thu nh·∫≠p nhanh")
async def slash_quick_add(interaction: discord.Interaction, amount: int, description: str = "Thu nh·∫≠p"):
    ctx = await bot.get_context(interaction)
    await add(ctx, amount, "Kh√°c", description=description)

# ==== CH·∫†Y BOT ====
if __name__ == "__main__":
    # Kh·ªüi t·∫°o database khi start
    init_database()
    
    # Sync slash commands
    @bot.event
    async def setup_hook():
        try:
            synced = await bot.tree.sync()
            print(f"‚úÖ ƒê·ªìng b·ªô {len(synced)} slash commands")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªìng b·ªô slash commands: {e}")
    
    # Ch·∫°y bot
    try:
        bot.run('YOUR_BOT_TOKEN')  # üîë Thay YOUR_BOT_TOKEN b·∫±ng token th·ª±c c·ªßa b·∫°n
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông bot: {e}")
        print("üí° Ki·ªÉm tra l·∫°i BOT_TOKEN v√† k·∫øt n·ªëi internet")
