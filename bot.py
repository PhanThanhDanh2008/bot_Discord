import discord
from discord.ext import commands
import sqlite3
from datetime import datetime, timedelta

# ==== C·∫§U H√åNH BOT ====
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents, help_command=None)

# ==== T·∫†O DATABASE ====
def init_database():
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 0,
            goal INTEGER DEFAULT 0,
            created_date TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER,
            type TEXT,
            description TEXT,
            date TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

# ==== H√ÄM PH·ª§ ====
def format_money(amount):
    return f"{amount:,} VND".replace(",", ".")

def get_or_create_user(user_id):
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute('INSERT INTO users (user_id, balance, goal, created_date) VALUES (?, 0, 0, ?)',
                       (user_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
    conn.close()

# ==== S·ª∞ KI·ªÜN BOT ====
@bot.event
async def on_ready():
    print(f'{bot.user} ƒë√£ online!')
    init_database()

# ==== L·ªÜNH HELP ====
@bot.command(name='help')
async def help_command(ctx):
    embed = discord.Embed(title="ü§ñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Finance Bot", color=0x00ff00)
    embed.add_field(
        name="üí∞ L·ªánh c∆° b·∫£n",
        value="`/balance` - Xem s·ªë d∆∞\n"
              "`/add [s·ªë ti·ªÅn] [m√¥ t·∫£]` - Th√™m thu nh·∫≠p\n"
              "`/spend [s·ªë ti·ªÅn] [m√¥ t·∫£]` - Chi ti√™u\n"
              "`/goal [s·ªë ti·ªÅn]` - ƒê·∫∑t m·ª•c ti√™u",
        inline=False
    )
    embed.add_field(
        name="üìä Th·ªëng k√™ & L·ªãch s·ª≠",
        value="`/history` - L·ªãch s·ª≠ giao d·ªãch\n"
              "`/stats` - Th·ªëng k√™ tu·∫ßn/th√°ng",
        inline=False
    )
    embed.add_field(
        name="üìù V√≠ d·ª•",
        value="`/add 3000000 l∆∞∆°ng th√°ng 6`\n"
              "`/spend 50000 ƒÉn s√°ng`\n"
              "`/goal 10000000`",
        inline=False
    )
    await ctx.send(embed=embed)

# ==== /BALANCE ====
@bot.command(name='balance')
async def balance(ctx):
    user_id = ctx.author.id
    get_or_create_user(user_id)
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance, goal FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        await ctx.send("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n. D√πng `/add` ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        return

    balance_amount, goal_amount = user_data
    progress = (balance_amount / goal_amount) * 100 if goal_amount else 0
    goal_text = f"{format_money(goal_amount)} ({progress:.1f}%)" if goal_amount else "Ch∆∞a ƒë·∫∑t m·ª•c ti√™u"

    embed = discord.Embed(
        title=f"üí∞ T√†i ch√≠nh c·ªßa {ctx.author.display_name}",
        color=0x00ff00
    )
    embed.add_field(name="S·ªë d∆∞", value=format_money(balance_amount), inline=False)
    embed.add_field(name="M·ª•c ti√™u", value=goal_text, inline=False)
    await ctx.send(embed=embed)

# ==== /ADD ====
@bot.command(name='add')
async def add(ctx, amount: int, *, description="Kh√¥ng c√≥ m√¥ t·∫£"):
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return

    user_id = ctx.author.id
    get_or_create_user(user_id)
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    cursor.execute('INSERT INTO transactions (user_id, amount, type, description, date) VALUES (?, ?, "income", ?, ?)',
                   (user_id, amount, description, now))
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    new_balance = cursor.fetchone()[0]
    conn.commit()
    conn.close()

    embed = discord.Embed(title="‚úÖ ƒê√£ th√™m thu nh·∫≠p", color=0x00ff00)
    embed.add_field(name="S·ªë ti·ªÅn", value=f"+{format_money(amount)}", inline=True)
    embed.add_field(name="M√¥ t·∫£", value=description, inline=True)
    embed.add_field(name="S·ªë d∆∞ m·ªõi", value=format_money(new_balance), inline=False)
    await ctx.send(embed=embed)

# ==== /SPEND ====
@bot.command(name='spend')
async def spend(ctx, amount: int, *, description="Kh√¥ng c√≥ m√¥ t·∫£"):
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return

    user_id = ctx.author.id
    get_or_create_user(user_id)

    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    current_balance = cursor.fetchone()[0]

    if current_balance < amount:
        await ctx.send(f"‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞: {format_money(current_balance)}")
        conn.close()
        return

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
    cursor.execute('INSERT INTO transactions (user_id, amount, type, description, date) VALUES (?, ?, "expense", ?, ?)',
                   (user_id, amount, description, now))
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    new_balance = cursor.fetchone()[0]
    conn.commit()
    conn.close()

    embed = discord.Embed(title="üí∏ Chi ti√™u ghi nh·∫≠n", color=0xff6b6b)
    embed.add_field(name="S·ªë ti·ªÅn", value=f"-{format_money(amount)}", inline=True)
    embed.add_field(name="M√¥ t·∫£", value=description, inline=True)
    embed.add_field(name="S·ªë d∆∞ c√≤n l·∫°i", value=format_money(new_balance), inline=False)
    await ctx.send(embed=embed)

# ==== /GOAL ====
@bot.command(name='goal')
async def goal(ctx, amount: int = None):
    user_id = ctx.author.id
    get_or_create_user(user_id)

    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()

    if amount is None:
        cursor.execute('SELECT balance, goal FROM users WHERE user_id = ?', (user_id,))
        balance, goal_amt = cursor.fetchone()
        if goal_amt == 0:
            await ctx.send("‚ùå B·∫°n ch∆∞a ƒë·∫∑t m·ª•c ti√™u.")
        else:
            progress = min((balance / goal_amt) * 100, 100)
            remain = max(goal_amt - balance, 0)
            embed = discord.Embed(title="üéØ M·ª•c ti√™u c·ªßa b·∫°n", color=0x4ecdc4)
            embed.add_field(name="M·ª•c ti√™u", value=format_money(goal_amt), inline=True)
            embed.add_field(name="ƒê√£ c√≥", value=format_money(balance), inline=True)
            embed.add_field(name="Ti·∫øn ƒë·ªô", value=f"{progress:.1f}%", inline=True)
            embed.add_field(name="C√≤n thi·∫øu", value=format_money(remain), inline=False)
            await ctx.send(embed=embed)
    else:
        if amount <= 0:
            await ctx.send("‚ùå M·ª•c ti√™u ph·∫£i l·ªõn h∆°n 0!")
            return
        cursor.execute('UPDATE users SET goal = ? WHERE user_id = ?', (amount, user_id))
        conn.commit()
        embed = discord.Embed(title="üéØ ƒê√£ ƒë·∫∑t m·ª•c ti√™u m·ªõi", description=f"{format_money(amount)}", color=0x4ecdc4)
        await ctx.send(embed=embed)

    conn.close()

# ==== /HISTORY ====
@bot.command(name='history')
async def history(ctx, days: int = 7):
    user_id = ctx.author.id
    get_or_create_user(user_id)

    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    limit_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
    cursor.execute('''
        SELECT amount, type, description, date 
        FROM transactions 
        WHERE user_id = ? AND date >= ? 
        ORDER BY date DESC LIMIT 10
    ''', (user_id, limit_date))
    records = cursor.fetchall()
    conn.close()

    if not records:
        await ctx.send(f"üì≠ Kh√¥ng c√≥ giao d·ªãch n√†o trong {days} ng√†y qua.")
        return

    embed = discord.Embed(title=f"üìã Giao d·ªãch {days} ng√†y", color=0x3498db)
    for amt, ttype, desc, date in records:
        symbol = "+" if ttype == "income" else "-"
        line = f"{symbol}{format_money(amt)} | {desc} | {date}"
        embed.add_field(name="üíµ" if ttype == "income" else "üí∏", value=line, inline=False)
    await ctx.send(embed=embed)

# ==== /STATS ====
@bot.command(name='stats')
async def stats(ctx):
    user_id = ctx.author.id
    get_or_create_user(user_id)
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()

    current_month = datetime.now().strftime('%Y-%m')
    week_start = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')

    cursor.execute('SELECT type, SUM(amount) FROM transactions WHERE user_id = ? AND date LIKE ? GROUP BY type',
                   (user_id, f'{current_month}%'))
    month_stats = dict(cursor.fetchall())

    cursor.execute('SELECT type, SUM(amount) FROM transactions WHERE user_id = ? AND date >= ? GROUP BY type',
                   (user_id, week_start))
    week_stats = dict(cursor.fetchall())

    embed = discord.Embed(title="üìä Th·ªëng k√™", color=0x6c5ce7)
    embed.add_field(
        name="Th√°ng n√†y",
        value=f"Thu: +{format_money(month_stats.get('income', 0))}\n"
              f"Chi: -{format_money(month_stats.get('expense', 0))}",
        inline=True
    )
    embed.add_field(
        name="Tu·∫ßn n√†y",
        value=f"Thu: +{format_money(week_stats.get('income', 0))}\n"
              f"Chi: -{format_money(week_stats.get('expense', 0))}",
        inline=True
    )
    await ctx.send(embed=embed)
    conn.close()

# ==== X·ª¨ L√ù L·ªñI ====
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå Thi·∫øu tham s·ªë. D√πng `/help` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå L·ªói ƒë·ªãnh d·∫°ng! S·ªë ti·ªÅn ph·∫£i l√† s·ªë.")
    else:
        await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i.")

# ==== CH·∫†Y BOT ====
if __name__ == "__main__":
    bot.run('')  # üîÅ D√°n token bot c·ªßa b·∫°n v√†o ƒë√¢y!
